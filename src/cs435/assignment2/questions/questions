1. Compute the number of primitive operations for each of the following algorithm
fragments. The “increment counter” step has not been mentioned explicitly – be sure
to take this into account in your computations. Hint: When faced with nested for
loops, compute the number of steps required by the inner loop first, and then figure
out the effect of the outer loop.
A. sum ← 0
for i ← 0 to n-1 do
sum ← sum + 1
B. sum ← 0
for i ← 0 to n-1 do
for j ← 0 to n-1 do
sum ← sum + 1


The number of primite operations is O(n) and in the second is O(n^2)

2. Determine the asymptotic running time of the following procedure (an exact
computation of number of basic operations is not necessary):
int[] arrays(int n) {
int[] arr = new int[n];
for(int i = 0; i < n; ++i){
arr[i] = 1;
}
for(int i = 0; i < n; ++i) {
for(int j = i; j < n; ++j){
arr[i] += arr[j] + i + j;
}
}

return arr;
}
3. Consider the following problem: As input you are given two sorted arrays of integers.
Your objective is to design an algorithm that would merge the two arrays together to
form a new sorted array that contains all the integers contained in the two arrays. For
example, on input
[1, 4, 5, 8, 17], [2, 4, 8, 11, 13, 21, 23, 25]
the algorithm would output the following array:
[1,2,4,4,5,8,8, 11, 13, 17, 21, 23, 25]
For this problem, do the following:
A. Design an algorithm Merge to solve this problem and write your algorithm
description using the pseudo-code syntax discussed in class.
B. Examining your pseudo-code, count the number of basic operations used
C. Implement your pseudo-code as a Java method merge having the following
signature:
int[] merge(int[] arr1, int[] arr2)
Be sure to test your method in a main method to be sure it really works!
4. Big-oh and Little-oh. Use the definitions of O(f(n)) and o(f(n)) given in class to
decide whether each of the following is true or false, and in each case, prove your
answer.
A. 1 + 4n2 is O(n2
)
B. n2 - 2n is not O(n)
C. log(n) is o(n)
D. n is not o(n)
5. Big-oh Rules. Suppose you know that f(n) and g(n) are both O(h(n)). Does it follow
that the function f(n) +g(n) is also O(h(n))? Prove your answer.
6. Power Set Algorithm. Given a set X, the power set of X, denoted P(X), is the set of
all subsets of X. Below, you are given an algorithm for computing the power set of a
given set. This algorithm is used in the “naïve” solution to the Knapsack Problem,
discussed in the first lecture. Implement this algorithm in a Java method:
List powerSet(List X)
Algorithm: PowerSet(X)
Input: A list X of elements
Output: A list P consisting of all subsets of X – elements of P are Sets
P ← new list
S ← new Set //S is the empty set
P.add(S) //P is now the set { S }
T ← new Set
while (!X.isEmpty() ) do
f ← X.removeFirst()
for each x in P do
T ← x U {f} // T is the set containing f & all elements of x
P.add(T)
return P
7. Prove by induction